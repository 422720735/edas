//RBAC

// 请求定义
// sub 想要访问资源的用户
// obj 要访问的资源, suf 表示资源扩展名
// act 用户对资源执行的操作，act可以是read、write、print等等你想要自定义的操作
[request_definition]
r = sub, obj, act, suf

// 授权policy定义，也就是*.cvs文件 p 定义的格式
[policy_definition]
p = sub, obj, act, suf

// 组定义，也就是*.cvs文件 g 定义的格式。g是用户组或角色
// 使用RBAC权限模型描述user-role之间的映射关系或resource-role之间的映射关系
[role_definition]
g = _, _

// 描述如果找到匹配的多条的授权policy，最终给出的验证授权结果，
// 如下面的定义说明只要有一条匹配的授权策略其eft是allow，
// 则最终给出的验证授权结果就是允许（注意每条授权policy默认的eft就是allow）。
[policy_effect]
e = some(where (p.eft == allow))

// 描述的是根据访问请求如何找到匹配的授权policy
[matchers] // 用户属于角色&&路由是匹配的&&扩展名符合要求&&请求是一致的
m = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && regexMatch(r.suf, p.suf) && (r.act == p.act || p.act == "*")