// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission.proto

package yak_permissions

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PermissionService service

type PermissionService interface {
	// 菜单管理
	// 增：添加菜单
	CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...client.CallOption) (*CreateMenuResponse, error)
	// 删: 删除菜单
	DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...client.CallOption) (*DeleteMenuResponse, error)
	// 改: 修改菜单
	UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...client.CallOption) (*UpdateMenuResponse, error)
	// 查: 查询菜单列表
	QueryMenu(ctx context.Context, in *QueryMenuRequest, opts ...client.CallOption) (*QueryMenuResponse, error)
	// 查询指定数据
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...client.CallOption) (*GetMenuResponse, error)
	// 角色管理
	// 增: 添加角色
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error)
	// 删: 删除角色
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	// 改: 修改角色
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error)
	// 查: 查询角色
	QueryRole(ctx context.Context, in *QueryRoleRequest, opts ...client.CallOption) (*QueryRoleResponse, error)
	// 查询指定角色
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*GetRoleResponse, error)
}

type permissionService struct {
	c    client.Client
	name string
}

func NewPermissionService(name string, c client.Client) PermissionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "yak.permissions"
	}
	return &permissionService{
		c:    c,
		name: name,
	}
}

func (c *permissionService) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...client.CallOption) (*CreateMenuResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.CreateMenu", in)
	out := new(CreateMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...client.CallOption) (*DeleteMenuResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.DeleteMenu", in)
	out := new(DeleteMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...client.CallOption) (*UpdateMenuResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.UpdateMenu", in)
	out := new(UpdateMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) QueryMenu(ctx context.Context, in *QueryMenuRequest, opts ...client.CallOption) (*QueryMenuResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.QueryMenu", in)
	out := new(QueryMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...client.CallOption) (*GetMenuResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.GetMenu", in)
	out := new(GetMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.CreateRole", in)
	out := new(CreateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.UpdateRole", in)
	out := new(UpdateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) QueryRole(ctx context.Context, in *QueryRoleRequest, opts ...client.CallOption) (*QueryRoleResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.QueryRole", in)
	out := new(QueryRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) GetRole(ctx context.Context, in *GetRoleRequest, opts ...client.CallOption) (*GetRoleResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.GetRole", in)
	out := new(GetRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PermissionService service

type PermissionServiceHandler interface {
	// 菜单管理
	// 增：添加菜单
	CreateMenu(context.Context, *CreateMenuRequest, *CreateMenuResponse) error
	// 删: 删除菜单
	DeleteMenu(context.Context, *DeleteMenuRequest, *DeleteMenuResponse) error
	// 改: 修改菜单
	UpdateMenu(context.Context, *UpdateMenuRequest, *UpdateMenuResponse) error
	// 查: 查询菜单列表
	QueryMenu(context.Context, *QueryMenuRequest, *QueryMenuResponse) error
	// 查询指定数据
	GetMenu(context.Context, *GetMenuRequest, *GetMenuResponse) error
	// 角色管理
	// 增: 添加角色
	CreateRole(context.Context, *CreateRoleRequest, *CreateRoleResponse) error
	// 删: 删除角色
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	// 改: 修改角色
	UpdateRole(context.Context, *UpdateRoleRequest, *UpdateRoleResponse) error
	// 查: 查询角色
	QueryRole(context.Context, *QueryRoleRequest, *QueryRoleResponse) error
	// 查询指定角色
	GetRole(context.Context, *GetRoleRequest, *GetRoleResponse) error
}

func RegisterPermissionServiceHandler(s server.Server, hdlr PermissionServiceHandler, opts ...server.HandlerOption) error {
	type permissionService interface {
		CreateMenu(ctx context.Context, in *CreateMenuRequest, out *CreateMenuResponse) error
		DeleteMenu(ctx context.Context, in *DeleteMenuRequest, out *DeleteMenuResponse) error
		UpdateMenu(ctx context.Context, in *UpdateMenuRequest, out *UpdateMenuResponse) error
		QueryMenu(ctx context.Context, in *QueryMenuRequest, out *QueryMenuResponse) error
		GetMenu(ctx context.Context, in *GetMenuRequest, out *GetMenuResponse) error
		CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *UpdateRoleResponse) error
		QueryRole(ctx context.Context, in *QueryRoleRequest, out *QueryRoleResponse) error
		GetRole(ctx context.Context, in *GetRoleRequest, out *GetRoleResponse) error
	}
	type PermissionService struct {
		permissionService
	}
	h := &permissionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PermissionService{h}, opts...))
}

type permissionServiceHandler struct {
	PermissionServiceHandler
}

func (h *permissionServiceHandler) CreateMenu(ctx context.Context, in *CreateMenuRequest, out *CreateMenuResponse) error {
	return h.PermissionServiceHandler.CreateMenu(ctx, in, out)
}

func (h *permissionServiceHandler) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, out *DeleteMenuResponse) error {
	return h.PermissionServiceHandler.DeleteMenu(ctx, in, out)
}

func (h *permissionServiceHandler) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, out *UpdateMenuResponse) error {
	return h.PermissionServiceHandler.UpdateMenu(ctx, in, out)
}

func (h *permissionServiceHandler) QueryMenu(ctx context.Context, in *QueryMenuRequest, out *QueryMenuResponse) error {
	return h.PermissionServiceHandler.QueryMenu(ctx, in, out)
}

func (h *permissionServiceHandler) GetMenu(ctx context.Context, in *GetMenuRequest, out *GetMenuResponse) error {
	return h.PermissionServiceHandler.GetMenu(ctx, in, out)
}

func (h *permissionServiceHandler) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error {
	return h.PermissionServiceHandler.CreateRole(ctx, in, out)
}

func (h *permissionServiceHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.PermissionServiceHandler.DeleteRole(ctx, in, out)
}

func (h *permissionServiceHandler) UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *UpdateRoleResponse) error {
	return h.PermissionServiceHandler.UpdateRole(ctx, in, out)
}

func (h *permissionServiceHandler) QueryRole(ctx context.Context, in *QueryRoleRequest, out *QueryRoleResponse) error {
	return h.PermissionServiceHandler.QueryRole(ctx, in, out)
}

func (h *permissionServiceHandler) GetRole(ctx context.Context, in *GetRoleRequest, out *GetRoleResponse) error {
	return h.PermissionServiceHandler.GetRole(ctx, in, out)
}
